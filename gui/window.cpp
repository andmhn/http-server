// generated by Fast Light User Interface Designer (fluid) version 1.0309

#include "window.h"
#include "functions.h"

void Window_Main::cb_start_btn_i(Fl_Button*, void*) {
  start_server();
}
void Window_Main::cb_start_btn(Fl_Button* o, void* v) {
  ((Window_Main*)(o->parent()->parent()->user_data()))->cb_start_btn_i(o,v);
}

void Window_Main::cb_clear_btn_i(Fl_Button*, void*) {
  clear_output();
}
void Window_Main::cb_clear_btn(Fl_Button* o, void* v) {
  ((Window_Main*)(o->parent()->parent()->user_data()))->cb_clear_btn_i(o,v);
}

void Window_Main::cb_chooser_i(Fl_Button*, void*) {
  folder_chooser();
}
void Window_Main::cb_chooser(Fl_Button* o, void* v) {
  ((Window_Main*)(o->parent()->parent()->user_data()))->cb_chooser_i(o,v);
}

void Window_Main::cb_stop_btn_i(Fl_Button*, void*) {
  stop_server();
}
void Window_Main::cb_stop_btn(Fl_Button* o, void* v) {
  ((Window_Main*)(o->parent()->parent()->user_data()))->cb_stop_btn_i(o,v);
}

Window_Main::Window_Main() {
  { m_window = new Fl_Double_Window(500, 400, "http-server");
    m_window->user_data((void*)(this));
    { group = new Fl_Group(15, 15, 470, 126);
      { folder_input = new Fl_File_Input(69, 15, 324, 36, "folder:");
        folder_input->tooltip("Enter the folder to serve");
      } // Fl_File_Input* folder_input
      { port_input = new Fl_Input(69, 61, 100, 32, "port:");
        port_input->tooltip("Enter Port Number (Optional)");
      } // Fl_Input* port_input
      { start_btn = new Fl_Button(69, 101, 64, 22, "Start");
        start_btn->tooltip("Start the server");
        start_btn->color((Fl_Color)78);
        start_btn->callback((Fl_Callback*)cb_start_btn);
      } // Fl_Button* start_btn
      { clear_btn = new Fl_Button(411, 101, 64, 22, "Clear");
        clear_btn->tooltip("Clear the output");
        clear_btn->callback((Fl_Callback*)cb_clear_btn);
      } // Fl_Button* clear_btn
      { chooser = new Fl_Button(411, 19, 45, 32, "..");
        chooser->tooltip("Open file chooser");
        chooser->callback((Fl_Callback*)cb_chooser);
        chooser->window()->hotspot(chooser);
      } // Fl_Button* chooser
      { stop_btn = new Fl_Button(69, 101, 64, 22, "Stop");
        stop_btn->tooltip("Stop the server");
        stop_btn->color((Fl_Color)89);
        stop_btn->labelcolor((Fl_Color)55);
        stop_btn->callback((Fl_Callback*)cb_stop_btn);
        stop_btn->hide();
      } // Fl_Button* stop_btn
      group->end();
    } // Fl_Group* group
    { output = new Fl_Text_Display(15, 149, 470, 236);
      Fl_Group::current()->resizable(output);
    } // Fl_Text_Display* output
    m_window->end();
  } // Fl_Double_Window* m_window
  // Make file chooser icon
  {
    Fl::scheme(NULL);
    Fl_File_Icon::load_system_icons();
    if ( (icon = Fl_File_Icon::find(".", Fl_File_Icon::DIRECTORY)) ) {
    // Icon found; assign it..
      chooser->labelcolor(FL_YELLOW);
      icon->label(chooser);
    }
  }
}

void Window_Main::show() {
  m_window->show();
}

/**
 open folder chooser
*/
void Window_Main::folder_chooser() {
  Fl_File_Chooser fc(".", "*", Fl_File_Chooser::SINGLE,
   	 		      "Select Folder");
  fc.type(Fl_File_Chooser::DIRECTORY);
  
  fc.show();
  
  while (fc.visible()) 
    Fl::wait();
  
  // file gets chosen
  if(fc.value())
    folder_input->value(fc.value());
}

Window_Main::~Window_Main() {
  delete folder_input;
  delete port_input;
  delete start_btn;
  delete stop_btn;
  delete clear_btn;
  delete chooser;
  delete output;
  delete icon;
}
